{"version":3,"sources":["components/common/Messages/Messages.module.css","redux/businessChatSelectors.ts","redux/authSelectors.ts","components/common/Messages/MessageItem/MessageItem.tsx","components/common/Messages/Messages.tsx","components/common/AddMessageForm/AddMessageForm.tsx","redux/businessChatReducer.ts","components/Chats/BusinessChat.tsx","components/Header/Header.tsx","redux/communicationChatSelectors.ts","redux/communicationChatReducer.ts","components/Chats/CommunicationChat.tsx","redux/authReducer.ts","components/Auth/Auth.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","components/Header/Header.module.css","components/Auth/Auth.module.css","components/common/Messages/MessageItem/MessageItem.module.css","components/Chats/Chat.module.css","components/common/AddMessageForm/AddMessageForm.module.css"],"names":["module","exports","selectBusinessMessages","state","businessChat","messages","selectUserName","auth","userName","selectUserId","userId","selectIsAuth","isAuth","MessageItem","message","deleteMessage","editMessage","useSelector","useState","newTextMessage","setNewTextMessage","editMode","setEditMode","messageTime","hours","date","getHours","minutes","getMinutes","className","styles","flex","message__username","wrap","size","onClick","id","message__time","message__text","message__edit","message__textarea","autoSize","value","onChange","e","target","length","Messages","messagesList","map","m","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","onScroll","event","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","AddMessageForm","sendMessage","initialValues","msg","validate","values","errors","onSubmit","form","form__input","TextArea","placeholder","bordered","minRows","maxRows","name","form__button","loading","disabled","danger","undefined","MESSAGES_CHANGED","MESSAGE_ADDED","MESSAGE_DELETED","MESSAGE_CHANGED","initialState","v1","Date","now","_setMessages","newMessages","_setMessage","messageText","messageId","_deleteMessage","filter","_addMessage","newMessage","businessChatActions","type","businessChatReducer","action","BusinessChat","dispatch","useDispatch","chat__header","resetForm","Header","header","header__title","header__navbar","header__communication","activeClassName","active","to","header__business","selectCommunicationMessages","communicationChat","communicationChatActions","communicationChatReducer","CommunicationChat","USER_NAME_CHANGED","USER_ID_CHANGED","IS_AUTH_SWITCHED","_setUserName","newUserName","_setUserId","newUserId","_toggleIsAuth","toggleVal","authActions","authReducer","Auth","setValue","auth__content","auth__header","auth__text","auth__input","auth__button","App","exact","path","render","PlanktonicsChat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.4be0a601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__G_j7f\"};","import {AppStateType} from \"./store\";\r\nimport {Message} from \"../types/types\";\r\n\r\nexport const selectBusinessMessages = (state: AppStateType): Message[] => {\r\n    return state.businessChat.messages;\r\n}","import {AppStateType} from \"./store\";\r\n\r\nexport const selectUserName = (state: AppStateType): string | null => {\r\n    return state.auth.userName;\r\n}\r\n\r\nexport const selectUserId = (state: AppStateType): string | null => {\r\n    return state.auth.userId;\r\n}\r\n\r\nexport const selectIsAuth = (state: AppStateType): boolean => {\r\n    return state.auth.isAuth;\r\n}","import React, {useState} from \"react\";\r\nimport {Message} from \"../../../../types/types\";\r\nimport {Button, Col, Input, Row, Space} from \"antd\";\r\nimport styles from \"./MessageItem.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUserId} from \"../../../../redux/authSelectors\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nexport const MessageItem: React.FC<MessagesListProps> = ({message, deleteMessage, editMessage}) => {\r\n    const userId = useSelector(selectUserId)\r\n\r\n    const [newTextMessage, setNewTextMessage] = useState(message.message);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const messageTime = {\r\n        hours: message.date.getHours(),\r\n        minutes: message.date.getMinutes() < 10 ? '0' + message.date.getMinutes() : message.date.getMinutes(),\r\n    }\r\n\r\n    const onDelete = () => {\r\n        deleteMessage(message.id)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        setEditMode(false)\r\n        if (newTextMessage.length > 0) {\r\n            editMessage(newTextMessage, message.id)\r\n        }\r\n    }\r\n\r\n    const onEdit = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.message}>\r\n            <Row>\r\n                <Col flex={1} className={styles.message__username}>\r\n                    <Space wrap>\r\n                        {message.userName}\r\n                        {\r\n                            userId === message.userId &&\r\n                            <Space wrap>\r\n                                <Button size={\"small\"} onClick={onDelete}>delete</Button>\r\n                                {!editMode &&\r\n                                    <Button size={\"small\"} onClick={onEdit}>edit</Button>\r\n                                }\r\n                            </Space>\r\n                        }\r\n                    </Space>\r\n                </Col>\r\n                <Col flex={1} className={styles.message__time}>\r\n                    {messageTime.hours}:{messageTime.minutes}\r\n                </Col>\r\n            </Row>\r\n            <Row className={styles.message__text}>\r\n                {!editMode && message.message}\r\n                {editMode &&\r\n                <div className={styles.message__edit}>\r\n                    <TextArea className={styles.message__textarea}\r\n                              autoSize value={newTextMessage}\r\n                              onChange={e => setNewTextMessage(e.target.value)}/>\r\n                    <Button size={\"small\"} onClick={onSubmit}>Submit</Button>\r\n                </div>\r\n                }\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype MessagesListProps = {\r\n    message: Message,\r\n    deleteMessage: (messageId: string) => void,\r\n    editMessage: (messageText: string, messageId: string) => void,\r\n}","import React, {useEffect, useRef, useState } from \"react\";\r\nimport {Message} from \"../../../types/types\";\r\nimport {MessageItem} from \"./MessageItem/MessageItem\";\r\nimport styles from './Messages.module.css'\r\n\r\nexport const Messages: React.FC<MessagesListProps> = ({messages, deleteMessage, editMessage}) => {\r\n\r\n    const messagesList = messages.map(m => {\r\n        return <MessageItem message={m} key={m.id}\r\n                            deleteMessage={deleteMessage}\r\n                            editMessage={editMessage}/>\r\n    })\r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = event.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) > 100) {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        } else {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    },[messages]);\r\n\r\n    return (\r\n        <div className={styles.messages} onScroll={scrollHandler}>\r\n            {messagesList}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype MessagesListProps = {\r\n    messages: Message[],\r\n    deleteMessage: (messageId: string) => void,\r\n    editMessage: (messageText: string ,messageId: string) => void,\r\n}","import React from \"react\";\r\nimport {Formik, Form, FormikErrors, FormikHelpers} from 'formik';\r\nimport {Input, SubmitButton} from \"formik-antd\";\r\nimport styles from \"./AddMessageForm.module.css\"\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormProps> = ({sendMessage}) => {\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{msg: ''}}\r\n                validate={values => {\r\n                    const errors: FormikErrors<FormValues> = {};\r\n                    if (!values.msg) {\r\n                        errors.msg = 'Required';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={sendMessage}\r\n            >\r\n                {({errors}) => (\r\n                    <Form className={styles.form}>\r\n                        <Row>\r\n                            <Col flex={1}>\r\n                                <div className={styles.form__input}>\r\n                                    <Input.TextArea placeholder='type here...'\r\n                                                    bordered={false}\r\n                                                    autoSize={{minRows: 1, maxRows: 6}}\r\n                                                    name=\"msg\"/>\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <SubmitButton className={styles.form__button}\r\n                                              loading={false}\r\n                                              disabled={false}\r\n                                              danger={errors.msg !== undefined}>\r\n                                    Send\r\n                                </SubmitButton>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype AddMessageFormProps = {\r\n    sendMessage: (values: FormValues, {resetForm}: FormikHelpers<FormValues>) => void,\r\n}\r\n\r\nexport type FormValues = {\r\n    msg: string,\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {Message} from \"../types/types\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst MESSAGES_CHANGED = 'planktonics_chat/business_chat/MESSAGES_CHANGED';\r\nconst MESSAGE_ADDED = 'planktonics_chat/business_chat/MESSAGE_ADDED';\r\nconst MESSAGE_DELETED = 'planktonics_chat/business_chat/MESSAGE_DELETED';\r\nconst MESSAGE_CHANGED = 'planktonics_chat/business_chat/MESSAGE_CHANGED';\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: v1(), message: 'Hi everyone', userName: 'John', userId: v1(), date: new Date(Date.now())},\r\n        {id: v1(), message: 'Is it a flood chat?', userName: 'John', userId: v1(), date: new Date(Date.now())},\r\n        {id: v1(), message: 'Hi, no', userName: 'Peter', userId: v1(), date: new Date(Date.now() + 10000)},\r\n    ] as Message[],\r\n};\r\n\r\nconst businessChatReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case MESSAGES_CHANGED:\r\n            return _setMessages(state, action.newMessages);\r\n        case MESSAGE_ADDED:\r\n            return _addMessage(state, action.newMessage);\r\n        case MESSAGE_DELETED:\r\n            return _deleteMessage(state, action.messageId);\r\n        case MESSAGE_CHANGED:\r\n            return _setMessage(state, action.messageText, action.messageId);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst _setMessages = (state: InitialStateType, newMessages: Message[]): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _setMessage = (state: InitialStateType, messageText: string, messageId: string): InitialStateType => {\r\n    const newMessages = state.messages.map(m => {\r\n        if (m.id === messageId) {\r\n            m.message = messageText\r\n        }\r\n        return m;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _deleteMessage = (state: InitialStateType, messageId: string): InitialStateType => {\r\n    const newMessages = state.messages.filter(m => {\r\n        return m.id !== messageId;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _addMessage = (state: InitialStateType, newMessage: Message): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        messages: [...state.messages, newMessage],\r\n    }\r\n}\r\n\r\nexport const businessChatActions = {\r\n    messagesChanged: (newMessages: Message[]) => ({type: MESSAGES_CHANGED, newMessages} as const),\r\n    messageAdded: (newMessage: Message) => ({type: MESSAGE_ADDED, newMessage} as const),\r\n    messageDeleted: (messageId: string) => ({type: MESSAGE_DELETED, messageId} as const),\r\n    messageChanged: (messageText: string, messageId: string) => (\r\n        {type: MESSAGE_CHANGED, messageText, messageId} as const\r\n    ),\r\n}\r\n\r\n// export const setInitializedThunkCreator = (): ThunkType =>\r\n//     async (dispatch) => {\r\n//         await dispatch(getAuthUserDataThunkCreator());\r\n//         dispatch(AppActions.initializedSuccess());\r\n//     }\r\n\r\nexport default businessChatReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionTypes = InferActionTypes<typeof businessChatActions>;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectBusinessMessages} from \"../../redux/businessChatSelectors\";\r\nimport {Messages} from \"../common/Messages/Messages\";\r\nimport {AddMessageForm, FormValues} from \"../common/AddMessageForm/AddMessageForm\";\r\nimport {Message} from \"../../types/types\";\r\nimport {v1} from \"uuid\";\r\nimport {businessChatActions} from \"../../redux/businessChatReducer\";\r\nimport styles from './Chat.module.css'\r\nimport {FormikHelpers} from \"formik\";\r\nimport {Divider} from \"antd\";\r\nimport {selectUserId, selectUserName} from \"../../redux/authSelectors\";\r\n\r\nexport const BusinessChat: React.FC = () => {\r\n    const messages = useSelector(selectBusinessMessages);\r\n    const userName = useSelector(selectUserName);\r\n    const userId = useSelector(selectUserId);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessage = (values: FormValues, {resetForm}: FormikHelpers<FormValues>) => {\r\n        if (userName && userId) {\r\n            const newMessage: Message = {\r\n                userName: userName,\r\n                message: values.msg,\r\n                userId: userId,\r\n                date: new Date(Date.now()),\r\n                id: v1(),\r\n            }\r\n            dispatch(businessChatActions.messageAdded(newMessage))\r\n            resetForm({})\r\n        }\r\n    }\r\n    const deleteMessage = (messageId: string) => {\r\n        dispatch(businessChatActions.messageDeleted(messageId))\r\n    }\r\n    const editMessage = (messageText: string ,messageId: string) => {\r\n        dispatch(businessChatActions.messageChanged(messageText, messageId));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={styles.chat__header}>Business Chat</h2>\r\n            <Messages messages={messages}\r\n                      deleteMessage={deleteMessage}\r\n                      editMessage={editMessage}/>\r\n            <Divider />\r\n            <AddMessageForm sendMessage={sendMessage}/>\r\n        </div>\r\n    );\r\n}","import {Col, Row } from 'antd';\nimport React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport styles from \"./Header.module.css\";\n\nexport const Header: React.FC = () => {\n    return (\n        <header className={styles.header}>\n            <h1 className={styles.header__title}>Planktonics Chat</h1>\n            <div className={styles.header__navbar}>\n                <Row>\n                    <Col className={styles.header__communication} flex={1}>\n                        <NavLink activeClassName={styles.active} to='/chat/communication'>\n                            <b>Communication chat</b>\n                        </NavLink>\n                    </Col>\n                    <Col className={styles.header__business} flex={1}>\n                        <NavLink activeClassName={styles.active} to='/chat/business'>\n                            <b>Business chat</b>\n                        </NavLink>\n                    </Col>\n                </Row>\n            </div>\n        </header>\n    );\n}\n","import {AppStateType} from \"./store\";\r\nimport {Message} from \"../types/types\";\r\n\r\nexport const selectCommunicationMessages = (state: AppStateType): Message[] => {\r\n    return state.communicationChat.messages;\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {Message} from \"../types/types\";\r\nimport { v1 } from \"uuid\";\r\n\r\nconst MESSAGES_CHANGED = 'planktonics_chat/communication_chat/MESSAGES_CHANGED';\r\nconst MESSAGE_ADDED = 'planktonics_chat/communication_chat/MESSAGE_ADDED';\r\nconst MESSAGE_DELETED = 'planktonics_chat/communication_chat/MESSAGE_DELETED';\r\nconst MESSAGE_CHANGED = 'planktonics_chat/communication_chat/MESSAGE_CHANGED';\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: v1(), message: 'Hello', userName: 'Peter', userId: v1(), date: new Date(Date.now())},\r\n        {id: v1(), message: 'Hi', userName: 'Mark', userId: v1(), date: new Date(Date.now() + 10000)},\r\n        {id: v1(), message: 'Nice', userName: 'Peter', userId: v1(), date: new Date(Date.now() + 10000)},\r\n    ] as Message[],\r\n};\r\n\r\nconst communicationChatReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case MESSAGES_CHANGED:\r\n            return _setMessages(state, action.newMessages);\r\n        case MESSAGE_ADDED:\r\n            return _addMessage(state, action.newMessage);\r\n        case MESSAGE_DELETED:\r\n            return _deleteMessage(state, action.messageId);\r\n        case MESSAGE_CHANGED:\r\n            return _setMessage(state, action.messageText, action.messageId);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst _setMessages = (state: InitialStateType, newMessages: Message[]): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _setMessage = (state: InitialStateType, messageText: string, messageId: string): InitialStateType => {\r\n    const newMessages = state.messages.map(m => {\r\n        if (m.id === messageId) {\r\n            m.message = messageText\r\n        }\r\n        return m;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _deleteMessage = (state: InitialStateType, messageId: string): InitialStateType => {\r\n    const newMessages = state.messages.filter(m => {\r\n        return m.id !== messageId;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        messages: [...newMessages],\r\n    }\r\n}\r\n\r\nconst _addMessage = (state: InitialStateType, newMessage: Message): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        messages: [...state.messages, newMessage],\r\n    }\r\n}\r\n\r\nexport const communicationChatActions = {\r\n    messagesChanged: (newMessages: Message[]) => ({type: MESSAGES_CHANGED, newMessages} as const),\r\n    messageAdded: (newMessage: Message) => ({type: MESSAGE_ADDED, newMessage} as const),\r\n    messageDeleted: (messageId: string) => ({type: MESSAGE_DELETED, messageId} as const),\r\n    messageChanged: (messageText: string, messageId: string) => (\r\n        {type: MESSAGE_CHANGED, messageText, messageId} as const\r\n    ),\r\n}\r\n\r\n// export const setInitializedThunkCreator = (): ThunkType =>\r\n//     async (dispatch) => {\r\n//         await dispatch(getAuthUserDataThunkCreator());\r\n//         dispatch(AppActions.initializedSuccess());\r\n//     }\r\n\r\nexport default communicationChatReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionTypes = InferActionTypes<typeof communicationChatActions>;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Messages} from \"../common/Messages/Messages\";\r\nimport {AddMessageForm, FormValues} from \"../common/AddMessageForm/AddMessageForm\";\r\nimport {Message} from \"../../types/types\";\r\nimport styles from './Chat.module.css'\r\nimport {FormikHelpers} from \"formik\";\r\nimport {Divider} from \"antd\";\r\nimport {selectCommunicationMessages} from \"../../redux/communicationChatSelectors\";\r\nimport {communicationChatActions} from \"../../redux/communicationChatReducer\";\r\nimport {v1} from \"uuid\";\r\nimport {selectUserId, selectUserName} from \"../../redux/authSelectors\";\r\n\r\nexport const CommunicationChat: React.FC = () => {\r\n    const messages = useSelector(selectCommunicationMessages);\r\n    const userName = useSelector(selectUserName);\r\n    const userId = useSelector(selectUserId);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessage = (values: FormValues, {resetForm}: FormikHelpers<FormValues>) => {\r\n        if (userName && userId) {\r\n            const newMessage: Message = {\r\n                userName: userName,\r\n                message: values.msg,\r\n                userId: userId,\r\n                date: new Date(Date.now()),\r\n                id: v1(),\r\n            }\r\n            dispatch(communicationChatActions.messageAdded(newMessage))\r\n            resetForm({})\r\n        }\r\n    }\r\n\r\n    const deleteMessage = (messageId: string) => {\r\n        dispatch(communicationChatActions.messageDeleted(messageId))\r\n    }\r\n    const editMessage = (messageText: string ,messageId: string) => {\r\n        dispatch(communicationChatActions.messageChanged(messageText, messageId));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={styles.chat__header}>Communication Chat</h2>\r\n            <Messages messages={messages} editMessage={editMessage} deleteMessage={deleteMessage}/>\r\n            <Divider/>\r\n            <AddMessageForm sendMessage={sendMessage}/>\r\n        </div>\r\n    );\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\n\r\nconst USER_NAME_CHANGED = 'planktonics_chat/auth/USER_NAME_CHANGED';\r\nconst USER_ID_CHANGED = 'planktonics_chat/auth/USER_ID_CHANGED';\r\nconst IS_AUTH_SWITCHED = 'planktonics_chat/auth/IS_AUTH_SWITCHED';\r\n\r\nlet initialState = {\r\n    userName: null as null | string,\r\n    userId: null as null | string,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case USER_NAME_CHANGED:\r\n            return _setUserName(state, action.newUserName);\r\n        case USER_ID_CHANGED:\r\n            return _setUserId(state, action.newUserId);\r\n        case IS_AUTH_SWITCHED:\r\n            return _toggleIsAuth(state, action.toggleVal);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst _setUserName = (state: InitialStateType, newUserName: string): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        userName: newUserName,\r\n    }\r\n}\r\nconst _setUserId = (state: InitialStateType, newUserId: string): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        userId: newUserId,\r\n    }\r\n}\r\nconst _toggleIsAuth = (state: InitialStateType, toggleVal: boolean): InitialStateType => {\r\n    return {\r\n        ...state,\r\n        isAuth: toggleVal,\r\n    }\r\n}\r\n\r\nexport const authActions = {\r\n    userNameChanged: (newUserName: string) => ({type: USER_NAME_CHANGED, newUserName} as const),\r\n    userIdChanged: (newUserId: string) => ({type: USER_ID_CHANGED, newUserId} as const),\r\n    isAuthSwitched: (toggleVal: boolean) => ({type: IS_AUTH_SWITCHED, toggleVal} as const),\r\n}\r\n\r\n// export const setInitializedThunkCreator = (): ThunkType =>\r\n//     async (dispatch) => {\r\n//         await dispatch(getAuthUserDataThunkCreator());\r\n//         dispatch(AppActions.initializedSuccess());\r\n//     }\r\n\r\nexport default authReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionTypes = InferActionTypes<typeof authActions>;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>;","import {Button, Input} from \"antd\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectIsAuth} from \"../../redux/authSelectors\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authActions} from \"../../redux/authReducer\";\r\nimport {v1} from \"uuid\";\r\nimport styles from \"./Auth.module.css\"\r\n\r\nexport const Auth: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const [value, setValue] = useState('');\r\n\r\n    if (isAuth) {\r\n        return <Redirect to='/chat'/>\r\n    }\r\n\r\n    const onClick = () => {\r\n        if (value.length > 0) {\r\n            dispatch(authActions.userNameChanged(value));\r\n            dispatch(authActions.userIdChanged(v1()));\r\n            dispatch(authActions.isAuthSwitched(true));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.auth}>\r\n            <div className={styles.auth__content}>\r\n                <h2 className={styles.auth__header}>Planktonics Chat</h2>\r\n                <p className={styles.auth__text}>Welcome in Planktonics Chat!</p>\r\n                <p className={styles.auth__text}>Enter your name, please\r\n                    <Input className={styles.auth__input} value={value} onChange={e => setValue(e.target.value)}/>\r\n                </p>\r\n                <div className={styles.auth__button}>\r\n                    <Button onClick={onClick}>Submit</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport {BusinessChat} from \"./components/Chats/BusinessChat\";\nimport {Header} from \"./components/Header/Header\";\nimport {CommunicationChat} from \"./components/Chats/CommunicationChat\";\nimport {Auth} from \"./components/Auth/Auth\";\nimport {useSelector} from \"react-redux\";\nimport {selectIsAuth} from \"./redux/authSelectors\";\n\nconst App: React.FC = () => {\n    const isAuth = useSelector(selectIsAuth);\n\n    if (!isAuth) {\n        return <Redirect to='/auth'/>\n    }\n    return (\n        <div className='app'>\n            <Header/>\n            <Switch>\n                <Route exact path='/chat/' render={() => <Redirect to='/chat/business'/>}/>\n                <Route path='/chat/business' render={() => <BusinessChat/>}/>\n                <Route path='/chat/communication' render={() => <CommunicationChat/>}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport const PlanktonicsChat: React.FC = () => {\n    return (\n        <div>\n            <Switch>\n                <Route exact path='/' render={() => <Redirect to='/chat'/>}/>\n                <Route path='/chat' render={() => <App/>}/>\n                <Route path='/auth' render={() => <Auth/>}/>\n                <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n            </Switch>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport businessChatReducer from \"./businessChatReducer\";\r\nimport communicationChatReducer from \"./communicationChatReducer\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    businessChat: businessChatReducer,\r\n    communicationChat: communicationChatReducer,\r\n    auth: authReducer,\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\nexport type InferActionTypes<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"antd/dist/antd.css\";\nimport './index.css';\nimport {PlanktonicsChat} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <PlanktonicsChat />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3CT1B\",\"header__title\":\"Header_header__title__2g0cu\",\"header__navbar\":\"Header_header__navbar__2_wDA\",\"header__business\":\"Header_header__business__11zhU\",\"active\":\"Header_active__1gSZr\",\"header__communication\":\"Header_header__communication__3fD4b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Auth_auth__3prNp\",\"auth__content\":\"Auth_auth__content__3Cqce\",\"auth__header\":\"Auth_auth__header__1nCiC\",\"auth__text\":\"Auth_auth__text__bdP9A\",\"auth__input\":\"Auth_auth__input__3QAU0\",\"auth__button\":\"Auth_auth__button__PMHwt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__oimgR\",\"message__username\":\"MessageItem_message__username__me4hk\",\"message__text\":\"MessageItem_message__text__2tfIF\",\"message__time\":\"MessageItem_message__time__30ezP\",\"message__edit\":\"MessageItem_message__edit__xW7-k\",\"message__textarea\":\"MessageItem_message__textarea__2XdRc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__3S4iI\",\"chat__header\":\"Chat_chat__header__25GX4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddMessageForm_form__2AB6t\",\"form__input\":\"AddMessageForm_form__input__1BWVO\",\"form__button\":\"AddMessageForm_form__button__3pbOl\"};"],"sourceRoot":""}